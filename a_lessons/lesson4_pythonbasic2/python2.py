w = '=' * 50
print(w)

text = 'I Love Python'
print('Love' in text) #проверка на наличие подстроки в строке
print('love' in text)
print('I Love Python' is text) #проверка на идентичность строк
print('I Love Python 2' is text)
print(1 is 1) #проверка на равенство
print(1 is not 2) #проверка на неравенство
print(w)
name = input('What is your name?: ') #ввод имени пользователя
print(f'User name is: {name}') #вывод имени пользователя

user_input = input('Enter something: ') #ввод данных пользователем
print(type(user_input)) #вывод типа данных
print(w)

a = '1'
print(type(a))
a = int(a)
print(type(a))
print(a)

print(w)

#LISTS(список)
#Структура данных для хранения последовательностей(упорядоченных множеств)
#Список - это изменяемый, итерируемый, упорядоченный тип данных.
#Список может содержать элементы различных типов. #Список создается с помощью квадратных скобок []
#Список может быть пустым []. #Список может содержать любое количество элементов
#Список может содержать элементы различных типов

my_list = [1, 3, 6, 8, None, 'text', False, 2.45, 'safad']  #список
print(my_list)
print(my_list[0]) #вывод первого элемента списка(первый элемент идет с индексом 0)
print(my_list[-1]) #вывод последнего элемента списка(счет идет от -1)
my_list[2] = 42 #изменение элемента списка
print(my_list)
print(w)

my_list2 = [] #создаем пустой список
my_list2.append(42) #добавляем в список переменную int 42
my_list2.append('text') #добавляем в список переменную 'text'

print(my_list2)
print(len(my_list2))
print(my_list2.index('text')) #вывод индекса элемента 'text'
my_list2.pop(0) #удаляет элемент по индексу 0
print(my_list2)

print('text' in my_list2) #проверка на наличие элемента 'text' в списке
print(42 in my_list2) #проверка на наличие элемента 42 в списке


#TUPLES(кортеж)
#Кортеж - это неизменяемый, итерируемый, упорядоченный тип данных. Нет функций pop, append, insert, remove, clear.
#Кортеж создается с помощью круглых скобок () #Кортеж может содержать элементы различных типов
#Кортеж может быть пустым () #Кортеж может содержать любое количество элементов

my_tuple3 = (1, 3, 6, None, 'text', False, 2.45, 'safad')
print(my_tuple3[0]) #вывод первого элемента кортежа
print(my_tuple3[-1]) #вывод последнего элемента кортежа

my_tuple4 = () #создаем пустой кортеж
#my_typle4 = tuple() #создаем пустой кортеж (не рекомендуется использовать)
my_typle4 = (1, 5, 2, 6)
print(my_typle4)
print(my_typle4.count(1)) #количество элементов (1) в кортеже
print(my_typle4.index(6)) #вывод индекса элемента 6

#SET(множество)
#Множество - это изменяемый, итерируемый, упорядоченный тип данных. Не гарантирует порядок элементов.
#Множество создается с помощью фигурных скобок {} #Множество может содержать элементы различных типов
#Множество может содержать любое количество элементов #Содержит только уникальные элементы
#Множество не поддерживает индексирование, дубликаты удаляются
my_set = {1, 3, 6, 7, None, 'text', False, 2.42, 3, 7}
my_set.add(42)
my_set.add('text')#дубликаты не добавляются
print(my_set)

#DICTIONARY(словарь)
#Словарь - это изменяемый, итерируемый, упорядоченный тип данных.
#Словарь создается с помощью фигурных скобок {} #Словарь может содержать элементы различных типов
#Словарь может содержать любое количество элементов #Словарь содержит ключи и значения
#Словарь не поддерживает индексирование, дубликаты удаляются

my_dict = {'name': 'John', 'age': 25, 'city': 'New York'}
print(my_dict['name']) #вывод значения по ключу 'name'
print(len(my_dict)) #вывод количества элементов в словаре
my_dict['age'] = 26 #изменение значения по ключу 'age'
print(my_dict)
my_dict.pop('age') #удаление элемента по ключу 'age'
print(my_dict)

print(my_dict.keys()) #вывод ключей словаря
print(my_dict.values()) #вывод значений словаря
print(my_dict.items()) #вывод ключей и значений словаря


























